import telebot
from telebot import types
from utils import quiz

TOKEN = "YOUR TOKEN"

bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    quiz.create_demo_data()
    
    user_data[message.from_user.id] = {
        'interests': set(),
        'stage': 'waiting_age',
        'age': None
    }

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø Career Adviser Bot. –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 100)",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda message: user_data.get(message.from_user.id, {}).get('stage') == 'waiting_age')
def handle_age(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text)
        if age < 10 or age > 100:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç).")
            return
        
        user_id = message.from_user.id
        user_data[user_id]['age'] = age
        user_data[user_id]['stage'] = 'start'
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã')
        markup.row('–°–æ–≤–µ—Ç –¥–Ω—è', '–ü–æ–º–æ—â—å /help')
        
        bot.send_message(
            message.chat.id,
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ —Ç–µ–±–µ {age} –ª–µ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.",
            reply_markup=markup
        )
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16 –∏–ª–∏ 25).")

@bot.message_handler(commands=['help'])
def help_cmd(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    text = (
        "üöÄ –ö–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n\n"
        "üîπ –ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç - –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π\n"
        "üîπ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n"
        "üîπ –°–æ–≤–µ—Ç –¥–Ω—è - –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞—Ä—å–µ—Ä—ã\n"
        "üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üîπ /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "üí° –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã —Ç–µ–∫—Å—Ç–æ–º, –∞ —è –ø–æ–ø—Ä–æ–±—É—é –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏."
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

@bot.message_handler(commands=['cancel'])
def cancel(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    user_id = message.from_user.id
    user_data[user_id] = {'interests': set(), 'stage': 'start', 'age': user_data.get(user_id, {}).get('age')}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã')
    markup.row('–°–æ–≤–µ—Ç –¥–Ω—è', '–ü–æ–º–æ—â—å /help')
    
    bot.send_message(
        message.chat.id, 
        "üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", 
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã')
def show_interests(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã"""
    interests = quiz.get_interests()
    formatted_interests = "\n".join(f"‚Ä¢ {interest}" for interest in sorted(interests))
    bot.send_message(
        message.chat.id, 
        f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n\n{formatted_interests}",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '–°–æ–≤–µ—Ç –¥–Ω—è')
def career_tip(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–≤–µ—Ç –¥–Ω—è'"""
    tip = quiz.get_career_tip()
    bot.send_message(
        message.chat.id, 
        f"üí° –°–æ–≤–µ—Ç –¥–Ω—è:\n\n{tip}",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç')
def start_test(message):
    """–ù–∞—á–∞–ª–æ –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞ –ø–æ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'interests': set(), 'stage': 'testing', 'age': None}
    else:
        user_data[user_id]['stage'] = 'testing'

    interests = quiz.get_interests()
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    for i in range(0, len(interests), 4):
        row = interests[i:i+4]
        buttons = [
            types.InlineKeyboardButton(
                text=f"{'‚úÖ ' if interest in user_data[user_id]['interests'] else ''}{interest}",
                callback_data=f"interest_{interest}"
            )
            for interest in row
        ]
        markup.add(*buttons)
    
    markup.add(types.InlineKeyboardButton(
        text="üöÄ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä", 
        callback_data="done"
    ))
    
    bot.send_message(
        message.chat.id,
        "üîç –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å\n"
        "‚Ä¢ –ù–∞–∂–º–∏ 'üöÄ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä', –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('interest_'))
def handle_interest_click(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É"""
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    interest = call.data.replace('interest_', '')
    
    if interest in user_data[user_id]['interests']:
        user_data[user_id]['interests'].remove(interest)
        bot.answer_callback_query(call.id, f"‚ùå –£–¥–∞–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
    else:
        user_data[user_id]['interests'].add(interest)
        bot.answer_callback_query(call.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    interests = quiz.get_interests()
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    for i in range(0, len(interests), 4):
        row = interests[i:i+4]
        buttons = [
            types.InlineKeyboardButton(
                text=f"{'‚úÖ ' if interest in user_data[user_id]['interests'] else ''}{interest}",
                callback_data=f"interest_{interest}"
            )
            for interest in row
        ]
        markup.add(*buttons)
    
    markup.add(types.InlineKeyboardButton(
        text="üöÄ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä", 
        callback_data="done"
    ))
    
    try:
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'done')
def handle_done(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤."""
    user_id = call.from_user.id
    if user_id not in user_data or not user_data[user_id]['interests']:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞!")
        return

    selected = list(user_data[user_id]['interests'])
    age = user_data[user_id].get('age')
    professions = quiz.get_professions_by_interests(selected)
    
    if not professions:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üòï –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
            reply_markup=None
        )
        return

    markup = types.InlineKeyboardMarkup()
    for prof in professions:
        if len(prof) == 6:
            prof_id, title, _, _, min_age, max_age = prof
        elif len(prof) == 4:
            prof_id, title, _, _ = prof
            min_age, max_age = 0, 100
        else:
            continue  # –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É

        if age is not None:
            if min_age > 0 and age < min_age:
                title += f" (–¥–æ—Å—Ç—É–ø–Ω–æ —Å {min_age} –ª–µ—Ç)"
            elif max_age < 100 and age > max_age:
                title += f" (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ {max_age} –ª–µ—Ç)"
        
        markup.add(types.InlineKeyboardButton(
            text=f"üë®‚Äçüíª {title}", 
            callback_data=f"prof_{prof_id}"
        ))
        

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üéØ –í–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã ({', '.join(selected)}):",
        reply_markup=markup
    )
    user_data[user_id]['stage'] = 'start'

@bot.callback_query_handler(func=lambda call: call.data.startswith('prof_'))
def show_profession_detail(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    prof_id = int(call.data.replace('prof_', ''))
    prof = quiz.get_profession_by_id(prof_id)
    if not prof:
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    if len(prof) == 6:
        prof_id, title, description, education, min_age, max_age = prof
    elif len(prof) == 3:
        prof_id, title, description = prof
        education = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        min_age, max_age = 0, 100
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")
        return

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ education ‚Äî —Å—Ç—Ä–æ–∫–∞
    if not education:
        education = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ min_age –∏ max_age ‚Äî —á–∏—Å–ª–∞
    try:
        min_age = int(min_age)
    except (TypeError, ValueError):
        min_age = 0
    try:
        max_age = int(max_age)
    except (TypeError, ValueError):
        max_age = 100

    user_age = user_data.get(call.from_user.id, {}).get('age')
    try:
        user_age = int(user_age)
    except (TypeError, ValueError):
        user_age = None

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
    age_info = ""
    if user_age is not None:
        if min_age > 0 and user_age < min_age:
            age_info = f"\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Å {min_age} –ª–µ—Ç. –í–∞–º –ø–æ–∫–∞ {user_age} –ª–µ—Ç."
        elif max_age < 100 and user_age > max_age:
            age_info = f"\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ {max_age} –ª–µ—Ç. –í–∞–º —É–∂–µ {user_age} –ª–µ—Ç."
        elif user_age >= min_age and user_age <= max_age:
            age_info = f"\n\n‚úÖ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> –í–∞–º {user_age} –ª–µ—Ç ‚Äî –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏."

    text = (
        f"<b>{title}</b>\n\n"
        f"<i>{description}</i>\n\n"
        f"üìö <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {education}"
        f"{age_info}\n\n"
        f"üîπ –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: True)
def text_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    text = message.text.lower()
    interests = quiz.get_interests()

    matched = [i for i in interests if i.lower() in text]

    if matched:
        user_data.setdefault(user_id, {'interests': set(), 'stage': 'start', 'age': None})
        user_data[user_id]['interests'].update(matched)

        professions = quiz.get_professions_by_interests(matched)
        if professions:
            markup = types.InlineKeyboardMarkup()
            for prof in professions:
                prof_id, title, _, _, min_age, max_age = prof
                age = user_data[user_id].get('age')
                if age is not None:
                    if min_age is not None and age < min_age:
                        title += f" (–¥–æ—Å—Ç—É–ø–Ω–æ —Å {min_age} –ª–µ—Ç)"
                    elif max_age is not None and age > max_age:
                        title += f" (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ {max_age} –ª–µ—Ç)"
                
                markup.add(types.InlineKeyboardButton(
                    text=f"üîπ {title}", 
                    callback_data=f"prof_{prof_id}"
                ))

            bot.send_message(
                message.chat.id,
                f"üîé –ü–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:",
                reply_markup=markup
            )
        else:
            bot.send_message(
                message.chat.id, 
                "–ü–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
            )
    else:
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –∏–ª–∏ /start –¥–ª—è –ø–æ–º–æ—â–∏."
        )

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()