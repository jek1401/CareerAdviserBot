import telebot
from telebot import types
from utils import quiz

TOKEN = "YOUR TOKEN"

bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —ç—Ç–∞–ø—ã
user_data = {}

# –ö–æ–º–∞–Ω–¥—ã

@bot.message_handler(commands=['start'])
def start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    quiz.create_demo_data()  # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É, –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã')
    markup.row('–°–æ–≤–µ—Ç –¥–Ω—è', '–ü–æ–º–æ—â—å /help')

    user_data[message.from_user.id] = {
        'interests': set(),
        'stage': 'start'
    }

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø Career Adviser Bot. –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def help_cmd(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    text = (
        "üöÄ –ö–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n\n"
        "üîπ –ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç - –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π\n"
        "üîπ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n"
        "üîπ –°–æ–≤–µ—Ç –¥–Ω—è - –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞—Ä—å–µ—Ä—ã\n"
        "üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üîπ /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "üí° –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã —Ç–µ–∫—Å—Ç–æ–º, –∞ —è –ø–æ–ø—Ä–æ–±—É—é –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏."
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown')

@bot.message_handler(commands=['cancel'])
def cancel(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    user_data[user_id] = {'interests': set(), 'stage': 'start'}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã')
    markup.row('–°–æ–≤–µ—Ç –¥–Ω—è', '–ü–æ–º–æ—â—å /help')
    
    bot.send_message(
        message.chat.id, 
        "üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", 
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã')
def show_interests(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã'. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
    """
    interests = quiz.get_interests()
    formatted_interests = "\n".join(f"‚Ä¢ {interest}" for interest in sorted(interests))
    bot.send_message(
        message.chat.id, 
        f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n\n{formatted_interests}",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '–°–æ–≤–µ—Ç –¥–Ω—è')
def career_tip(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–≤–µ—Ç –¥–Ω—è'. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç.
    """
    tip = quiz.get_career_tip()
    bot.send_message(
        message.chat.id, 
        f"üí° –°–æ–≤–µ—Ç –¥–Ω—è:\n\n{tip}",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç')
def start_test(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç'. –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
    """
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
    quiz.create_demo_data()
    
    user_id = message.from_user.id
    user_data[user_id] = {'interests': set(), 'stage': 'testing'}

    interests = quiz.get_interests()
    markup = types.InlineKeyboardMarkup(row_width=2)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ 4 –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for i in range(0, len(interests), 4):
        row = interests[i:i+4]
        buttons = [
            types.InlineKeyboardButton(
                text=f"{'‚úÖ ' if interest in user_data[user_id]['interests'] else ''}{interest}",
                callback_data=f"interest_{interest}"
            )
            for interest in row
        ]
        markup.add(*buttons)
    
    markup.add(types.InlineKeyboardButton(
        text="üöÄ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä", 
        callback_data="done"
    ))
    
    bot.send_message(
        message.chat.id,
        "üîç –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å\n"
        "‚Ä¢ –ù–∞–∂–º–∏ 'üöÄ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä', –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('interest_') or call.data == 'done')
def callback_test(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞.
    """
    user_id = call.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {'interests': set(), 'stage': 'start'}

    if call.data == 'done':
        selected = user_data[user_id].get('interests', set())
        if not selected:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞!")
            return

        professions = quiz.get_professions_by_interests(list(selected))
        if not professions:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üòï –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
                reply_markup=None
            )
            return

        markup = types.InlineKeyboardMarkup()
        for prof in professions:
            prof_id, title, _, _ = prof
            markup.add(types.InlineKeyboardButton(
                text=f"üë®‚Äçüíª {title}", 
                callback_data=f"prof_{prof_id}"
            ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üéØ –í–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã ({', '.join(user_data[user_id]['interests'])}):",
            reply_markup=markup
        )
        user_data[user_id]['stage'] = 'start'
    else:
        interest = call.data.replace('interest_', '')
        if interest in user_data[user_id]['interests']:
            user_data[user_id]['interests'].remove(interest)
            bot.answer_callback_query(call.id, f"‚ùå –£–¥–∞–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
        else:
            user_data[user_id]['interests'].add(interest)
            bot.answer_callback_query(call.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –æ—Ç–º–µ—Ç–∫–∞–º–∏
        interests = quiz.get_interests()
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        for i in range(0, len(interests), 4):
            row = interests[i:i+4]
            buttons = [
                types.InlineKeyboardButton(
                    text=f"{'‚úÖ ' if i in user_data[user_id]['interests'] else ''}{i}",
                    callback_data=f"interest_{i}"
                )
                for i in row
            ]
            markup.add(*buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="üöÄ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä", 
            callback_data="done"
        ))
        
        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        except Exception as e:
            print(f"Error updating markup: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('prof_'))
def callback_profession_detail(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.
    """
    prof_id = int(call.data.replace('prof_', ''))
    prof = quiz.get_profession_by_id(prof_id)
    if prof:
        title, description, education = prof
        text = (
            f"<b>{title}</b>\n\n"
            f"<i>{description}</i>\n\n"
            f"üìö <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {education}\n\n"
            f"üîπ –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML'
        )
    else:
        bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.message_handler(func=lambda message: True)
def text_handler(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ —Ç–µ–∫—Å—Ç–µ.
    """
    user_id = message.from_user.id
    text = message.text.lower()
    interests = quiz.get_interests()

    matched = [i for i in interests if i.lower() in text]

    if matched:
        user_data.setdefault(user_id, {'interests': set(), 'stage': 'start'})
        user_data[user_id]['interests'].update(matched)

        professions = quiz.get_professions_by_interests(list(user_data[user_id]['interests']))
        if professions:
            markup = types.InlineKeyboardMarkup()
            for prof in professions:
                prof_id, title, _, _ = prof
                markup.add(types.InlineKeyboardButton(
                    text=f"üîπ {title}", 
                    callback_data=f"prof_{prof_id}"
                ))

            bot.send_message(
                message.chat.id,
                f"üîé –ü–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:",
                reply_markup=markup
            )
        else:
            bot.send_message(
                message.chat.id, 
                "–ü–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
            )
    else:
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –∏–ª–∏ /start –¥–ª—è –ø–æ–º–æ—â–∏."
        )

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")